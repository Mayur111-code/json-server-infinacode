{
  "challenges": [
    {
      "id": 1,
      "title": "Reverse an Array",
      "description": "Given an array of integers, return the reversed array.",
      "points": 10,
      "options": ["[4,3,2,1]", "[1,2,3,4]", "[1,4,3,2]", "[2,1,3,4]"],
      "correct": "[4,3,2,1]"
    },
    {
      "id": 2,
      "title": "Find Maximum",
      "description": "Given an array, find the maximum number.",
      "points": 10,
      "options": ["9", "7", "2", "1"],
      "correct": "9"
    },
    {
      "id": 3,
      "title": "Sum of Array",
      "description": "Return the sum of all elements in an array.",
      "points": 10,
      "options": ["18", "15", "20", "10"],
      "correct": "18"
    },
    {
      "id": 4,
      "title": "Check Prime",
      "description": "Check if a given number is prime.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 5,
      "title": "Fibonacci Number",
      "description": "Return the nth Fibonacci number.",
      "points": 15,
      "options": ["13", "8", "21", "5"],
      "correct": "13"
    },
    {
      "id": 6,
      "title": "Palindrome String",
      "description": "Check if the given string is a palindrome.",
      "points": 10,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 7,
      "title": "Count Vowels",
      "description": "Count the number of vowels in a string.",
      "points": 10,
      "options": ["3", "2", "4", "1"],
      "correct": "3"
    },
    {
      "id": 8,
      "title": "Remove Duplicates",
      "description": "Remove duplicate elements from an array.",
      "points": 10,
      "options": ["[1,2,3,4]", "[1,2,2,3,3,4]", "[1,3,4,2]", "[1,2,3]"],
      "correct": "[1,2,3,4]"
    },
    {
      "id": 9,
      "title": "Factorial",
      "description": "Return factorial of a given number.",
      "points": 15,
      "options": ["120", "24", "720", "60"],
      "correct": "120"
    },
    {
      "id": 10,
      "title": "Sum of Digits",
      "description": "Return the sum of digits of a number.",
      "points": 10,
      "options": ["10", "9", "8", "12"],
      "correct": "10"
    },
    {
      "id": 11,
      "title": "Binary Search",
      "description": "Implement binary search on a sorted array.",
      "points": 20,
      "options": ["4", "2", "5", "3"],
      "correct": "4"
    },
    {
      "id": 12,
      "title": "Merge Sorted Arrays",
      "description": "Merge two sorted arrays into one sorted array.",
      "points": 15,
      "options": ["[1,2,3,4,5,6]", "[1,3,2,4,5,6]", "[1,2,3,4,6,5]", "[1,2,4,3,5,6]"],
      "correct": "[1,2,3,4,5,6]"
    },
    {
      "id": 13,
      "title": "Find Minimum",
      "description": "Find the minimum value in an array.",
      "points": 10,
      "options": ["1", "3", "0", "2"],
      "correct": "0"
    },
    {
      "id": 14,
      "title": "String Length",
      "description": "Return the length of a string.",
      "points": 5,
      "options": ["11", "10", "12", "9"],
      "correct": "11"
    },
    {
      "id": 15,
      "title": "Array Average",
      "description": "Calculate the average of array elements.",
      "points": 10,
      "options": ["4.5", "5", "4", "5.5"],
      "correct": "4.5"
    },
    {
      "id": 16,
      "title": "Power Calculation",
      "description": "Calculate base raised to the exponent.",
      "points": 10,
      "options": ["16", "8", "32", "64"],
      "correct": "16"
    },
    {
      "id": 17,
      "title": "GCD Calculation",
      "description": "Find the greatest common divisor of two numbers.",
      "points": 15,
      "options": ["6", "3", "2", "12"],
      "correct": "6"
    },
    {
      "id": 18,
      "title": "LCM Calculation",
      "description": "Find the least common multiple of two numbers.",
      "points": 15,
      "options": ["36", "12", "18", "24"],
      "correct": "36"
    },
    {
      "id": 19,
      "title": "Check Even",
      "description": "Check if a number is even.",
      "points": 5,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 20,
      "title": "Check Odd",
      "description": "Check if a number is odd.",
      "points": 5,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 21,
      "title": "Square Root",
      "description": "Calculate the square root of a number.",
      "points": 10,
      "options": ["5", "4", "6", "7"],
      "correct": "5"
    },
    {
      "id": 22,
      "title": "Count Words",
      "description": "Count the number of words in a string.",
      "points": 10,
      "options": ["4", "3", "5", "6"],
      "correct": "4"
    },
    {
      "id": 23,
      "title": "Reverse String",
      "description": "Reverse the characters in a string.",
      "points": 10,
      "options": ["dlrow olleH", "Hello world", "world Hello", "olleH dlrow"],
      "correct": "dlrow olleH"
    },
    {
      "id": 24,
      "title": "Title Case",
      "description": "Convert a string to title case.",
      "points": 10,
      "options": ["Hello World", "hello world", "HELLO WORLD", "Hello world"],
      "correct": "Hello World"
    },
    {
      "id": 25,
      "title": "Find Median",
      "description": "Find the median of an array.",
      "points": 15,
      "options": ["5", "4.5", "5.5", "6"],
      "correct": "5"
    },
    {
      "id": 26,
      "title": "Mode of Array",
      "description": "Find the mode of an array.",
      "points": 15,
      "options": ["3", "5", "2", "4"],
      "correct": "3"
    },
    {
      "id": 27,
      "title": "Range of Array",
      "description": "Find the range of an array.",
      "points": 10,
      "options": ["8", "7", "9", "10"],
      "correct": "8"
    },
    {
      "id": 28,
      "title": "Check Anagram",
      "description": "Check if two strings are anagrams.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 29,
      "title": "Binary to Decimal",
      "description": "Convert a binary number to decimal.",
      "points": 15,
      "options": ["13", "11", "15", "9"],
      "correct": "13"
    },
    {
      "id": 30,
      "title": "Decimal to Binary",
      "description": "Convert a decimal number to binary.",
      "points": 15,
      "options": ["1101", "1011", "1111", "1001"],
      "correct": "1101"
    },
    {
      "id": 31,
      "title": "FizzBuzz",
      "description": "Implement FizzBuzz for a given number.",
      "points": 10,
      "options": ["Fizz", "Buzz", "FizzBuzz", "13"],
      "correct": "Fizz"
    },
    {
      "id": 32,
      "title": "Check Perfect Square",
      "description": "Check if a number is a perfect square.",
      "points": 10,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 33,
      "title": "Check Perfect Number",
      "description": "Check if a number is a perfect number.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 34,
      "title": "Find Factors",
      "description": "Find all factors of a number.",
      "points": 10,
      "options": ["[1,2,3,6]", "[1,2,6]", "[1,6]", "[2,3]"],
      "correct": "[1,2,3,6]"
    },
    {
      "id": 35,
      "title": "Prime Factors",
      "description": "Find prime factors of a number.",
      "points": 15,
      "options": ["[2,3]", "[2,2,3]", "[1,2,3]", "[6]"],
      "correct": "[2,3]"
    },
    {
      "id": 36,
      "title": "Check Armstrong",
      "description": "Check if a number is an Armstrong number.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 37,
      "title": "Check Palindrome Number",
      "description": "Check if a number is a palindrome.",
      "points": 10,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 38,
      "title": "Sort Array",
      "description": "Sort an array in ascending order.",
      "points": 10,
      "options": ["[1,2,3,4,5]", "[5,4,3,2,1]", "[1,3,2,4,5]", "[1,2,4,3,5]"],
      "correct": "[1,2,3,4,5]"
    },
    {
      "id": 39,
      "title": "Sort Array Descending",
      "description": "Sort an array in descending order.",
      "points": 10,
      "options": ["[5,4,3,2,1]", "[1,2,3,4,5]", "[5,4,2,3,1]", "[5,3,4,2,1]"],
      "correct": "[5,4,3,2,1]"
    },
    {
      "id": 40,
      "title": "Find Second Largest",
      "description": "Find the second largest number in an array.",
      "points": 15,
      "options": ["8", "9", "7", "10"],
      "correct": "8"
    },
    {
      "id": 41,
      "title": "Find Second Smallest",
      "description": "Find the second smallest number in an array.",
      "points": 15,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 42,
      "title": "Rotate Array",
      "description": "Rotate array elements by k positions.",
      "points": 15,
      "options": ["[4,5,1,2,3]", "[3,4,5,1,2]", "[5,1,2,3,4]", "[2,3,4,5,1]"],
      "correct": "[4,5,1,2,3]"
    },
    {
      "id": 43,
      "title": "Find Missing Number",
      "description": "Find the missing number in an array.",
      "points": 15,
      "options": ["5", "4", "6", "7"],
      "correct": "5"
    },
    {
      "id": 44,
      "title": "Find Duplicates",
      "description": "Find duplicate elements in an array.",
      "points": 15,
      "options": ["[3,6]", "[3]", "[6]", "[3,6,9]"],
      "correct": "[3,6]"
    },
    {
      "id": 45,
      "title": "Matrix Addition",
      "description": "Add two matrices.",
      "points": 15,
      "options": ["[[6,8],[10,12]]", "[[5,7],[9,11]]", "[[6,7],[10,11]]", "[[5,8],[9,12]]"],
      "correct": "[[6,8],[10,12]]"
    },
    {
      "id": 46,
      "title": "Matrix Multiplication",
      "description": "Multiply two matrices.",
      "points": 20,
      "options": ["[[19,22],[43,50]]", "[[18,21],[42,49]]", "[[19,21],[43,49]]", "[[18,22],[42,50]]"],
      "correct": "[[19,22],[43,50]]"
    },
    {
      "id": 47,
      "title": "Transpose Matrix",
      "description": "Transpose a matrix.",
      "points": 15,
      "options": ["[[1,4],[2,5],[3,6]]", "[[1,2,3],[4,5,6]]", "[[1,3,5],[2,4,6]]", "[[1,4],[2,5]]"],
      "correct": "[[1,4],[2,5],[3,6]]"
    },
    {
      "id": 48,
      "title": "Check Identity Matrix",
      "description": "Check if a matrix is an identity matrix.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 49,
      "title": "Check Sparse Matrix",
      "description": "Check if a matrix is a sparse matrix.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 50,
      "title": "String Concatenation",
      "description": "Concatenate two strings.",
      "points": 5,
      "options": ["HelloWorld", "Hello World", "Helloworld", "hello world"],
      "correct": "HelloWorld"
    },
    {
      "id": 51,
      "title": "String Contains",
      "description": "Check if a string contains a substring.",
      "points": 10,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 52,
      "title": "String Replace",
      "description": "Replace all occurrences of a substring in a string.",
      "points": 10,
      "options": ["Hello Universe", "Hello World", "Universe", "World"],
      "correct": "Hello Universe"
    },
    {
      "id": 53,
      "title": "String Split",
      "description": "Split a string into an array of words.",
      "points": 10,
      "options": ["['Hello','World']", "['Hello World']", "['H','e','l','l','o']", "['Hello',' ','World']"],
      "correct": "['Hello','World']"
    },
    {
      "id": 54,
      "title": "String Trim",
      "description": "Remove whitespace from both ends of a string.",
      "points": 5,
      "options": ["Hello World", " Hello World ", "Hello World  ", "  Hello World"],
      "correct": "Hello World"
    },
    {
      "id": 55,
      "title": "String Upper Case",
      "description": "Convert a string to uppercase.",
      "points": 5,
      "options": ["HELLO WORLD", "hello world", "Hello World", "Hello world"],
      "correct": "HELLO WORLD"
    },
    {
      "id": 56,
      "title": "String Lower Case",
      "description": "Convert a string to lowercase.",
      "points": 5,
      "options": ["hello world", "HELLO WORLD", "Hello World", "Hello world"],
      "correct": "hello world"
    },
    {
      "id": 57,
      "title": "Check Substring",
      "description": "Check if a string is a substring of another string.",
      "points": 10,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 58,
      "title": "Find Substring Index",
      "description": "Find the index of a substring in a string.",
      "points": 10,
      "options": ["6", "5", "7", "8"],
      "correct": "6"
    },
    {
      "id": 59,
      "title": "Count Substring",
      "description": "Count occurrences of a substring in a string.",
      "points": 10,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 60,
      "title": "Check Prefix",
      "description": "Check if a string starts with a given prefix.",
      "points": 10,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 61,
      "title": "Check Suffix",
      "description": "Check if a string ends with a given suffix.",
      "points": 10,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 62,
      "title": "String Repeat",
      "description": "Repeat a string n times.",
      "points": 10,
      "options": ["HelloHelloHello", "Hello Hello Hello", "HelloHello", "Hello Hello"],
      "correct": "HelloHelloHello"
    },
    {
      "id": 63,
      "title": "String Reverse Words",
      "description": "Reverse the order of words in a string.",
      "points": 15,
      "options": ["World Hello", "Hello World", "dlroW olleH", "olleH dlroW"],
      "correct": "World Hello"
    },
    {
      "id": 64,
      "title": "Check Valid Email",
      "description": "Check if a string is a valid email address.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 65,
      "title": "Check Valid URL",
      "description": "Check if a string is a valid URL.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 66,
      "title": "Check Valid IP",
      "description": "Check if a string is a valid IP address.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 67,
      "title": "Extract Domain",
      "description": "Extract domain from a URL.",
      "points": 10,
      "options": ["example.com", "www.example.com", "https://www.example.com", "example"],
      "correct": "example.com"
    },
    {
      "id": 68,
      "title": "Extract Protocol",
      "description": "Extract protocol from a URL.",
      "points": 10,
      "options": ["https", "http", "ftp", "www"],
      "correct": "https"
    },
    {
      "id": 69,
      "title": "Count Characters",
      "description": "Count occurrences of each character in a string.",
      "points": 15,
      "options": ["{'H':1,'e':1,'l':2,'o':1}", "{'H':1,'e':1,'l':2,'o':1,' ':1,'W':1,'r':1,'d':1}", "{'H':1,'e':1,'l':3,'o':2}", "{'H':1,'e':1,'l':2,'o':1,'W':1,'r':1,'d':1}"],
      "correct": "{'H':1,'e':1,'l':2,'o':1}"
    },
    {
      "id": 70,
      "title": "Check Isogram",
      "description": "Check if a string is an isogram.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 71,
      "title": "Check Pangram",
      "description": "Check if a string is a pangram.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 72,
      "title": "Caesar Cipher",
      "description": "Encrypt a string using Caesar cipher.",
      "points": 20,
      "options": ["Khoor Zruog", "Hello World", "Khooq Zruog", "Khoor World"],
      "correct": "Khoor Zruog"
    },
    {
      "id": 73,
      "title": "Run-Length Encoding",
      "description": "Encode a string using run-length encoding.",
      "points": 20,
      "options": ["3A2B1C", "A3B2C1", "3A2B1C2", "A A A B B C"],
      "correct": "3A2B1C"
    },
    {
      "id": 74,
      "title": "Run-Length Decoding",
      "description": "Decode a run-length encoded string.",
      "points": 20,
      "options": ["AAABBC", "A3B2C1", "3A2B1C", "AAABB C"],
      "correct": "AAABBC"
    },
    {
      "id": 75,
      "title": "Check Balanced Parentheses",
      "description": "Check if parentheses in a string are balanced.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 76,
      "title": "Check Balanced Brackets",
      "description": "Check if all types of brackets in a string are balanced.",
      "points": 20,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 77,
      "title": "Infix to Postfix",
      "description": "Convert an infix expression to postfix.",
      "points": 25,
      "options": ["AB+C*", "A+B*C", "ABC*+", "AB*C+"],
      "correct": "AB+C*"
    },
    {
      "id": 78,
      "title": "Evaluate Postfix",
      "description": "Evaluate a postfix expression.",
      "points": 25,
      "options": ["7", "9", "5", "11"],
      "correct": "7"
    },
    {
      "id": 79,
      "title": "Tower of Hanoi",
      "description": "Solve Tower of Hanoi for n disks.",
      "points": 30,
      "options": ["7", "15", "3", "5"],
      "correct": "7"
    },
    {
      "id": 80,
      "title": "Fibonacci Sequence",
      "description": "Generate Fibonacci sequence up to n terms.",
      "points": 15,
      "options": ["[0,1,1,2,3,5,8]", "[1,1,2,3,5,8]", "[0,1,2,3,5,8]", "[1,2,3,5,8]"],
      "correct": "[0,1,1,2,3,5,8]"
    },
    {
      "id": 81,
      "title": "Prime Numbers",
      "description": "Generate prime numbers up to n.",
      "points": 20,
      "options": ["[2,3,5,7]", "[1,2,3,5,7]", "[2,3,5,7,9]", "[3,5,7]"],
      "correct": "[2,3,5,7]"
    },
    {
      "id": 82,
      "title": "Sieve of Eratosthenes",
      "description": "Find all primes up to n using Sieve of Eratosthenes.",
      "points": 25,
      "options": ["[2,3,5,7]", "[1,2,3,5,7]", "[2,3,5,7,9]", "[3,5,7]"],
      "correct": "[2,3,5,7]"
    },
    {
      "id": 83,
      "title": "Bubble Sort",
      "description": "Sort an array using bubble sort.",
      "points": 15,
      "options": ["[1,2,3,4,5]", "[5,4,3,2,1]", "[1,3,2,4,5]", "[1,2,4,3,5]"],
      "correct": "[1,2,3,4,5]"
    },
    {
      "id": 84,
      "title": "Selection Sort",
      "description": "Sort an array using selection sort.",
      "points": 15,
      "options": ["[1,2,3,4,5]", "[5,4,3,2,1]", "[1,3,2,4,5]", "[1,2,4,3,5]"],
      "correct": "[1,2,3,4,5]"
    },
    {
      "id": 85,
      "title": "Insertion Sort",
      "description": "Sort an array using insertion sort.",
      "points": 15,
      "options": ["[1,2,3,4,5]", "[5,4,3,2,1]", "[1,3,2,4,5]", "[1,2,4,3,5]"],
      "correct": "[1,2,3,4,5]"
    },
    {
      "id": 86,
      "title": "Merge Sort",
      "description": "Sort an array using merge sort.",
      "points": 20,
      "options": ["[1,2,3,4,5]", "[5,4,3,2,1]", "[1,3,2,4,5]", "[1,2,4,3,5]"],
      "correct": "[1,2,3,4,5]"
    },
    {
      "id": 87,
      "title": "Quick Sort",
      "description": "Sort an array using quick sort.",
      "points": 20,
      "options": ["[1,2,3,4,5]", "[5,4,3,2,1]", "[1,3,2,4,5]", "[1,2,4,3,5]"],
      "correct": "[1,2,3,4,5]"
    },
    {
      "id": 88,
      "title": "Heap Sort",
      "description": "Sort an array using heap sort.",
      "points": 25,
      "options": ["[1,2,3,4,5]", "[5,4,3,2,1]", "[1,3,2,4,5]", "[1,2,4,3,5]"],
      "correct": "[1,2,3,4,5]"
    },
    {
      "id": 89,
      "title": "Linear Search",
      "description": "Search for an element in an array using linear search.",
      "points": 10,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 90,
      "title": "Binary Search",
      "description": "Search for an element in a sorted array using binary search.",
      "points": 15,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 91,
      "title": "Interpolation Search",
      "description": "Search for an element in a sorted array using interpolation search.",
      "points": 20,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 92,
      "title": "Jump Search",
      "description": "Search for an element in a sorted array using jump search.",
      "points": 20,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 93,
      "title": "Exponential Search",
      "description": "Search for an element in a sorted array using exponential search.",
      "points": 25,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 94,
      "title": "Ternary Search",
      "description": "Search for an element in a sorted array using ternary search.",
      "points": 25,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 95,
      "title": "Find Peak Element",
      "description": "Find a peak element in an array.",
      "points": 20,
      "options": ["5", "3", "4", "2"],
      "correct": "5"
    },
    {
      "id": 96,
      "title": "Find Floor",
      "description": "Find floor of a number in a sorted array.",
      "points": 15,
      "options": ["4", "5", "3", "6"],
      "correct": "4"
    },
    {
      "id": 97,
      "title": "Find Ceiling",
      "description": "Find ceiling of a number in a sorted array.",
      "points": 15,
      "options": ["5", "4", "6", "3"],
      "correct": "5"
    },
    {
      "id": 98,
      "title": "Count Inversions",
      "description": "Count inversions in an array.",
      "points": 25,
      "options": ["5", "4", "6", "3"],
      "correct": "5"
    },
    {
      "id": 99,
      "title": "Next Permutation",
      "description": "Find next permutation of an array.",
      "points": 30,
      "options": ["[1,3,2]", "[2,1,3]", "[3,1,2]", "[2,3,1]"],
      "correct": "[1,3,2]"
    },
    {
      "id": 100,
      "title": "Previous Permutation",
      "description": "Find previous permutation of an array.",
      "points": 30,
      "options": ["[3,2,1]", "[2,3,1]", "[1,3,2]", "[3,1,2]"],
      "correct": "[3,2,1]"
    },
    {
      "id": 101,
      "title": "Kadane's Algorithm",
      "description": "Find the maximum subarray sum using Kadane's algorithm.",
      "points": 25,
      "options": ["6", "5", "7", "4"],
      "correct": "6"
    },
    {
      "id": 102,
      "title": "Sliding Window Maximum",
      "description": "Find the maximum in each sliding window of size k.",
      "points": 30,
      "options": ["[3,3,5,5,6,7]", "[3,5,5,6,7]", "[3,3,5,6,7]", "[3,5,6,7]"],
      "correct": "[3,3,5,5,6,7]"
    },
    {
      "id": 103,
      "title": "Trapping Rain Water",
      "description": "Calculate how much rainwater can be trapped between bars.",
      "points": 30,
      "options": ["6", "5", "7", "8"],
      "correct": "6"
    },
    {
      "id": 104,
      "title": "Container With Most Water",
      "description": "Find two lines that together with the x-axis form a container that holds the most water.",
      "points": 25,
      "options": ["49", "48", "50", "47"],
      "correct": "49"
    },
    {
      "id": 105,
      "title": "Three Sum",
      "description": "Find all unique triplets that sum to zero.",
      "points": 25,
      "options": ["[[-1,-1,2],[-1,0,1]]", "[[-1,0,1]]", "[[-1,-1,2]]", "[[-2,0,2],[-1,0,1]]"],
      "correct": "[[-1,-1,2],[-1,0,1]]"
    },
    {
      "id": 106,
      "title": "Four Sum",
      "description": "Find all unique quadruplets that sum to target.",
      "points": 30,
      "options": ["[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]", "[[-2,-1,1,2]]", "[[-2,0,0,2],[-1,0,0,1]]", "[[-2,-1,1,2],[-1,0,0,1]]"],
      "correct": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]"
    },
    {
      "id": 107,
      "title": "Remove Nth Node From End",
      "description": "Remove the nth node from the end of a linked list.",
      "points": 20,
      "options": ["[1,2,3,5]", "[1,2,3,4,5]", "[2,3,4,5]", "[1,2,4,5]"],
      "correct": "[1,2,3,5]"
    },
    {
      "id": 108,
      "title": "Reverse Linked List",
      "description": "Reverse a singly linked list.",
      "points": 15,
      "options": ["[5,4,3,2,1]", "[1,2,3,4,5]", "[5,4,3,2]", "[4,3,2,1]"],
      "correct": "[5,4,3,2,1]"
    },
    {
      "id": 109,
      "title": "Merge Two Sorted Lists",
      "description": "Merge two sorted linked lists.",
      "points": 20,
      "options": ["[1,1,2,3,4,4]", "[1,2,3,4]", "[1,1,2,3,4]", "[1,2,3,4,4]"],
      "correct": "[1,1,2,3,4,4]"
    },
    {
      "id": 110,
      "title": "Linked List Cycle",
      "description": "Detect if a linked list has a cycle.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 111,
      "title": "Find Cycle Start",
      "description": "Find the node where a cycle begins in a linked list.",
      "points": 20,
      "options": ["3", "2", "4", "1"],
      "correct": "3"
    },
    {
      "id": 112,
      "title": "Intersection of Two Lists",
      "description": "Find the intersection node of two linked lists.",
      "points": 20,
      "options": ["8", "4", "2", "1"],
      "correct": "8"
    },
    {
      "id": 113,
      "title": "Palindrome Linked List",
      "description": "Check if a linked list is a palindrome.",
      "points": 20,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 114,
      "title": "Add Two Numbers",
      "description": "Add two numbers represented as linked lists.",
      "points": 25,
      "options": ["[7,0,8]", "[7,0,9]", "[8,0,7]", "[7,1,8]"],
      "correct": "[7,0,8]"
    },
    {
      "id": 115,
      "title": "Copy List with Random Pointer",
      "description": "Create a deep copy of a linked list with random pointers.",
      "points": 30,
      "options": ["[[7,null],[13,0],[11,4],[10,2],[1,0]]", "[[7,null],[13,7],[11,1],[10,11],[1,7]]", "[[7,null],[13,0],[11,4],[10,2]]", "[[7,null],[13,0],[11,4],[10,2],[1,4]]"],
      "correct": "[[7,null],[13,0],[11,4],[10,2],[1,0]]"
    },
    {
      "id": 116,
      "title": "LRU Cache",
      "description": "Implement Least Recently Used (LRU) cache.",
      "points": 30,
      "options": ["[1,-1]", "[1,-1,3]", "[-1,3,4]", "[1,3,4]"],
      "correct": "[1,-1]"
    },
    {
      "id": 117,
      "title": "Binary Tree Inorder Traversal",
      "description": "Perform inorder traversal of a binary tree.",
      "points": 15,
      "options": ["[4,2,5,1,3]", "[1,2,4,5,3]", "[4,5,2,3,1]", "[1,2,3,4,5]"],
      "correct": "[4,2,5,1,3]"
    },
    {
      "id": 118,
      "title": "Binary Tree Preorder Traversal",
      "description": "Perform preorder traversal of a binary tree.",
      "points": 15,
      "options": ["[1,2,4,5,3]", "[4,2,5,1,3]", "[1,2,3,4,5]", "[4,5,2,3,1]"],
      "correct": "[1,2,4,5,3]"
    },
    {
      "id": 119,
      "title": "Binary Tree Postorder Traversal",
      "description": "Perform postorder traversal of a binary tree.",
      "points": 15,
      "options": ["[4,5,2,3,1]", "[1,2,4,5,3]", "[4,2,5,1,3]", "[1,2,3,4,5]"],
      "correct": "[4,5,2,3,1]"
    },
    {
      "id": 120,
      "title": "Binary Tree Level Order",
      "description": "Perform level order traversal of a binary tree.",
      "points": 20,
      "options": ["[[3],[9,20],[15,7]]", "[[3],[9,20],[7,15]]", "[[3,9,20],[15,7]]", "[[3],[9],[20],[15],[7]]"],
      "correct": "[[3],[9,20],[15,7]]"
    },
    {
      "id": 121,
      "title": "Maximum Depth of Binary Tree",
      "description": "Find the maximum depth of a binary tree.",
      "points": 15,
      "options": ["3", "2", "4", "1"],
      "correct": "3"
    },
    {
      "id": 122,
      "title": "Symmetric Tree",
      "description": "Check if a binary tree is symmetric.",
      "points": 20,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 123,
      "title": "Path Sum",
      "description": "Check if the tree has a root-to-leaf path with given sum.",
      "points": 20,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 124,
      "title": "Construct Binary Tree from Preorder and Inorder",
      "description": "Construct binary tree from preorder and inorder traversal arrays.",
      "points": 30,
      "options": ["[3,9,20,null,null,15,7]", "[3,9,20,15,7]", "[3,9,20,null,15,7]", "[3,9,null,20,15,7]"],
      "correct": "[3,9,20,null,null,15,7]"
    },
    {
      "id": 125,
      "title": "Construct Binary Tree from Inorder and Postorder",
      "description": "Construct binary tree from inorder and postorder traversal arrays.",
      "points": 30,
      "options": ["[3,9,20,null,null,15,7]", "[3,9,20,15,7]", "[3,9,20,null,15,7]", "[3,9,null,20,15,7]"],
      "correct": "[3,9,20,null,null,15,7]"
    },
    {
      "id": 126,
      "title": "Binary Search Tree Validation",
      "description": "Validate if a binary tree is a valid BST.",
      "points": 25,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 127,
      "title": "Kth Smallest Element in BST",
      "description": "Find the kth smallest element in a BST.",
      "points": 25,
      "options": ["1", "2", "3", "4"],
      "correct": "1"
    },
    {
      "id": 128,
      "title": "Lowest Common Ancestor of BST",
      "description": "Find the lowest common ancestor of two nodes in a BST.",
      "points": 25,
      "options": ["6", "2", "8", "4"],
      "correct": "6"
    },
    {
      "id": 129,
      "title": "Implement Trie",
      "description": "Implement a trie (prefix tree) data structure.",
      "points": 30,
      "options": ["[true, true, false]", "[true, false, true]", "[false, true, true]", "[true, true, true]"],
      "correct": "[true, true, false]"
    },
    {
      "id": 130,
      "title": "Word Search",
      "description": "Check if a word exists in a 2D board of characters.",
      "points": 30,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 131,
      "title": "Number of Islands",
      "description": "Count the number of islands in a 2D grid.",
      "points": 30,
      "options": ["1", "2", "3", "4"],
      "correct": "1"
    },
    {
      "id": 132,
      "title": "Course Schedule",
      "description": "Check if you can finish all courses given prerequisites.",
      "points": 30,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 133,
      "title": "Alien Dictionary",
      "description": "Find the order of characters in an alien language.",
      "points": 35,
      "options": ["'wertf'", "'wert'", "'wertfs'", "'werft'"],
      "correct": "'wertf'"
    },
    {
      "id": 134,
      "title": "Graph Valid Tree",
      "description": "Check if a graph is a valid tree.",
      "points": 25,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 135,
      "title": "Number of Connected Components",
      "description": "Count the number of connected components in an undirected graph.",
      "points": 25,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 136,
      "title": "Clone Graph",
      "description": "Create a deep copy of a graph.",
      "points": 30,
      "options": ["[[2,4],[1,3],[2,4],[1,3]]", "[[2,4],[1,3],[4],[3]]", "[[2],[1,3],[2,4],[1]]", "[[2,4],[3],[4],[1]]"],
      "correct": "[[2,4],[1,3],[2,4],[1,3]]"
    },
    {
      "id": 137,
      "title": "Pacific Atlantic Water Flow",
      "description": "Find cells where water can flow to both Pacific and Atlantic oceans.",
      "points": 35,
      "options": ["[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]", "[[0,4],[1,3],[1,4],[2,2],[3,0],[4,0]]", "[[0,4],[1,3],[1,4],[3,0],[3,1],[4,0]]", "[[0,4],[1,3],[1,4],[2,2],[3,1],[4,0]]"],
      "correct": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]"
    },
    {
      "id": 138,
      "title": "Longest Increasing Path",
      "description": "Find the length of the longest increasing path in a matrix.",
      "points": 35,
      "options": ["4", "3", "5", "6"],
      "correct": "4"
    },
    {
      "id": 139,
      "title": "Robot Room Cleaner",
      "description": "Clean an entire room using a robot cleaner.",
      "points": 40,
      "options": ["All cells cleaned", "Some cells cleaned", "No cells cleaned", "Error"],
      "correct": "All cells cleaned"
    },
    {
      "id": 140,
      "title": "Word Ladder",
      "description": "Find the length of the shortest transformation sequence from beginWord to endWord.",
      "points": 35,
      "options": ["5", "4", "6", "3"],
      "correct": "5"
    },
    {
      "id": 141,
      "title": "Minimum Knight Moves",
      "description": "Find the minimum number of moves for a knight to reach target position.",
      "points": 30,
      "options": ["1", "2", "3", "4"],
      "correct": "1"
    },
    {
      "id": 142,
      "title": "Chessboard Knight Probability",
      "description": "Calculate the probability that a knight remains on the board after k moves.",
      "points": 35,
      "options": ["0.0625", "0.125", "0.25", "0.5"],
      "correct": "0.0625"
    },
    {
      "id": 143,
      "title": "Sudoku Solver",
      "description": "Solve a Sudoku puzzle.",
      "points": 40,
      "options": ["[['5','3','4','6','7','8','9','1','2'],['6','7','2','1','9','5','3','4','8'],['1','9','8','3','4','2','5','6','7'],['8','5','9','7','6','1','4','2','3'],['4','2','6','8','5','3','7','9','1'],['7','1','3','9','2','4','8','5','6'],['9','6','1','5','3','7','2','8','4'],['2','8','7','4','1','9','6','3','5'],['3','4','5','2','8','6','1','7','9']]", "[['5','3','4','6','7','8','9','1','2'],['6','7','2','1','9','5','3','4','8'],['1','9','8','3','4','2','5','6','7'],['8','5','9','7','6','1','4','2','3'],['4','2','6','8','5','3','7','9','1'],['7','1','3','9','2','4','8','5','6'],['9','6','1','5','3','7','2','8','4'],['2','8','7','4','1','9','6','3','5'],['3','4','5','2','8','6','1','7','9']]", "[['5','3','4','6','7','8','9','1','2'],['6','7','2','1','9','5','3','4','8'],['1','9','8','3','4','2','5','6','7'],['8','5','9','7','6','1','4','2','3'],['4','2','6','8','5','3','7','9','1'],['7','1','3','9','2','4','8','5','6'],['9','6','1','5','3','7','2','8','4'],['2','8','7','4','1','9','6','3','5'],['3','4','5','2','8','6','1','7','9']]", "[['5','3','4','6','7','8','9','1','2'],['6','7','2','1','9','5','3','4','8'],['1','9','8','3','4','2','5','6','7'],['8','5','9','7','6','1','4','2','3'],['4','2','6','8','5','3','7','9','1'],['7','1','3','9','2','4','8','5','6'],['9','6','1','5','3','7','2','8','4'],['2','8','7','4','1','9','6','3','5'],['3','4','5','2','8','6','1','7','9']]"],
      "correct": "[['5','3','4','6','7','8','9','1','2'],['6','7','2','1','9','5','3','4','8'],['1','9','8','3','4','2','5','6','7'],['8','5','9','7','6','1','4','2','3'],['4','2','6','8','5','3','7','9','1'],['7','1','3','9','2','4','8','5','6'],['9','6','1','5','3','7','2','8','4'],['2','8','7','4','1','9','6','3','5'],['3','4','5','2','8','6','1','7','9']]"
    },
    {
      "id": 144,
      "title": "N-Queens",
      "description": "Solve the N-Queens puzzle.",
      "points": 35,
      "options": ["[['.Q..','...Q','Q...','..Q.'],['..Q.','Q...','...Q','.Q..']]", "[['Q...','..Q.','.Q..','...Q']]", "[['.Q..','...Q','Q...','..Q.']]", "[['.Q..','...Q'],['Q...','..Q.']]"],
      "correct": "[['.Q..','...Q','Q...','..Q.'],['..Q.','Q...','...Q','.Q..']]"
    },
    {
      "id": 145,
      "title": "N-Queens II",
      "description": "Count the number of distinct solutions to the N-Queens problem.",
      "points": 35,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 146,
      "title": "Generate Parentheses",
      "description": "Generate all combinations of well-formed parentheses.",
      "points": 30,
      "options": ["['((()))','(()())','(())()','()(())','()()()']", "['((()))','(()())','(())()','()(())']", "['((()))','(()())','(())()','()()()']", "['(()())','(())()','()(())','()()()']"],
      "correct": "['((()))','(()())','(())()','()(())','()()()']"
    },
    {
      "id": 147,
      "title": "Word Break",
      "description": "Determine if a string can be segmented into dictionary words.",
      "points": 30,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 148,
      "title": "Palindrome Partitioning",
      "description": "Partition a string such that every substring is a palindrome.",
      "points": 30,
      "options": ["[['a','a','b'],['aa','b']]", "[['aab']]", "[['a','a','b']]", "[['aa','b']]"],
      "correct": "[['a','a','b'],['aa','b']]"
    },
    {
      "id": 149,
      "title": "Decode Ways",
      "description": "Count how many ways a string of digits can be decoded to letters.",
      "points": 30,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 150,
      "title": "Integer to English Words",
      "description": "Convert a non-negative integer to its English words representation.",
      "points": 35,
      "options": ["'One Hundred Twenty Three'", "'One Hundred Twenty Three '", "'One Hundred and Twenty Three'", "'One Hundred Twenty-Three'"],
      "correct": "'One Hundred Twenty Three'"
    },
    {
      "id": 151,
      "title": "Basic Calculator",
      "description": "Implement a basic calculator to evaluate a simple expression string.",
      "points": 35,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 152,
      "title": "Basic Calculator II",
      "description": "Implement a calculator to evaluate a simple expression string with +, -, *, /.",
      "points": 35,
      "options": ["7", "6", "8", "5"],
      "correct": "7"
    },
    {
      "id": 153,
      "title": "Reverse Integer",
      "description": "Reverse digits of a 32-bit signed integer.",
      "points": 20,
      "options": ["321", "123", "-321", "-123"],
      "correct": "321"
    },
    {
      "id": 154,
      "title": "String to Integer (atoi)",
      "description": "Implement the atoi function to convert a string to an integer.",
      "points": 25,
      "options": ["42", "-42", "0", "-0"],
      "correct": "42"
    },
    {
      "id": 155,
      "title": "Palindrome Number",
      "description": "Determine whether an integer is a palindrome.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 156,
      "title": "Roman to Integer",
      "description": "Convert a Roman numeral to an integer.",
      "points": 20,
      "options": ["3", "4", "5", "6"],
      "correct": "3"
    },
    {
      "id": 157,
      "title": "Integer to Roman",
      "description": "Convert an integer to a Roman numeral.",
      "points": 20,
      "options": ["'III'", "'IIII'", "'IV'", "'IIV'"],
      "correct": "'III'"
    },
    {
      "id": 158,
      "title": "Plus One",
      "description": "Add one to a number represented as an array of digits.",
      "points": 15,
      "options": ["[1,2,4]", "[1,2,3]", "[1,2,3,4]", "[1,2,4,0]"],
      "correct": "[1,2,4]"
    },
    {
      "id": 159,
      "title": "Add Binary",
      "description": "Add two binary strings.",
      "points": 15,
      "options": ["'100'", "'101'", "'110'", "'111'"],
      "correct": "'100'"
    },
    {
      "id": 160,
      "title": "Multiply Strings",
      "description": "Multiply two numbers represented as strings.",
      "points": 30,
      "options": ["'56088'", "'56088 '", "'56089'", "'56087'"],
      "correct": "'56088'"
    },
    {
      "id": 161,
      "title": "Sqrt(x)",
      "description": "Compute the square root of x rounded down to the nearest integer.",
      "points": 20,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 162,
      "title": "Pow(x, n)",
      "description": "Implement pow(x, n), which calculates x raised to the power n.",
      "points": 25,
      "options": ["1024.0", "1024", "1024.00000", "1024.0"],
      "correct": "1024.0"
    },
    {
      "id": 163,
      "title": "Divide Two Integers",
      "description": "Divide two integers without using multiplication, division, and mod operator.",
      "points": 30,
      "options": ["3", "2", "4", "5"],
      "correct": "3"
    },
    {
      "id": 164,
      "title": "Fraction to Recurring Decimal",
      "description": "Given two integers representing numerator and denominator, return the fraction in string format.",
      "points": 30,
      "options": ["'0.5'", "'0.5(0)'", "'0.50'", "'0.4(9)'"],
      "correct": "'0.5'"
    },
    {
      "id": 165,
      "title": "Max Points on a Line",
      "description": "Given an array of points, find the maximum number of points that lie on the same straight line.",
      "points": 35,
      "options": ["3", "2", "4", "5"],
      "correct": "3"
    },
    {
      "id": 166,
      "title": "Factorial Trailing Zeroes",
      "description": "Count the number of trailing zeroes in n!.",
      "points": 20,
      "options": ["0", "1", "2", "3"],
      "correct": "0"
    },
    {
      "id": 167,
      "title": "Happy Number",
      "description": "Determine if a number is happy.",
      "points": 20,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 168,
      "title": "Ugly Number",
      "description": "Check if a number is an ugly number.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 169,
      "title": "Nth Ugly Number",
      "description": "Find the nth ugly number.",
      "points": 25,
      "options": ["12", "10", "14", "16"],
      "correct": "12"
    },
    {
      "id": 170,
      "title": "Super Ugly Number",
      "description": "Find the nth super ugly number.",
      "points": 30,
      "options": ["32", "30", "34", "36"],
      "correct": "32"
    },
    {
      "id": 171,
      "title": "Count Primes",
      "description": "Count the number of prime numbers less than a non-negative number, n.",
      "points": 20,
      "options": ["4", "3", "5", "6"],
      "correct": "4"
    },
    {
      "id": 172,
      "title": "Perfect Squares",
      "description": "Find the least number of perfect square numbers which sum to n.",
      "points": 25,
      "options": ["3", "2", "4", "5"],
      "correct": "3"
    },
    {
      "id": 173,
      "title": "Excel Sheet Column Title",
      "description": "Convert a column number to an Excel column title.",
      "points": 20,
      "options": ["'A'", "'B'", "'C'", "'D'"],
      "correct": "'A'"
    },
    {
      "id": 174,
      "title": "Excel Sheet Column Number",
      "description": "Convert an Excel column title to a column number.",
      "points": 20,
      "options": ["1", "2", "3", "4"],
      "correct": "1"
    },
    {
      "id": 175,
      "title": "Power of Two",
      "description": "Check if a number is a power of two.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 176,
      "title": "Power of Three",
      "description": "Check if a number is a power of three.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 177,
      "title": "Power of Four",
      "description": "Check if a number is a power of four.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 178,
      "title": "Number of 1 Bits",
      "description": "Return the number of '1' bits in a number.",
      "points": 15,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 179,
      "title": "Reverse Bits",
      "description": "Reverse bits of a given 32 bits unsigned integer.",
      "points": 20,
      "options": ["964176192", "964176191", "964176193", "964176190"],
      "correct": "964176192"
    },
    {
      "id": 180,
      "title": "Missing Number",
      "description": "Find the missing number in an array containing n distinct numbers taken from 0, 1, 2, ..., n.",
      "points": 20,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 181,
      "title": "First Missing Positive",
      "description": "Find the smallest missing positive integer.",
      "points": 30,
      "options": ["3", "2", "4", "5"],
      "correct": "3"
    },
    {
      "id": 182,
      "title": "Find All Duplicates",
      "description": "Find all duplicates in an array where elements are between 1 and n.",
      "points": 25,
      "options": ["[2,3]", "[1,2]", "[3,4]", "[1,4]"],
      "correct": "[2,3]"
    },
    {
      "id": 183,
      "title": "Set Matrix Zeroes",
      "description": "If an element in an MxN matrix is 0, set its entire row and column to 0.",
      "points": 25,
      "options": ["[[1,0,1],[0,0,0],[1,0,1]]", "[[0,0,0],[0,0,0],[0,0,0]]", "[[1,0,1],[0,0,0],[0,0,0]]", "[[0,0,0],[0,0,0],[1,0,1]]"],
      "correct": "[[1,0,1],[0,0,0],[1,0,1]]"
    },
    {
      "id": 184,
      "title": "Spiral Matrix",
      "description": "Return all elements of the matrix in spiral order.",
      "points": 25,
      "options": ["[1,2,3,6,9,8,7,4,5]", "[1,2,3,4,5,6,7,8,9]", "[1,4,7,8,9,6,3,2,5]", "[1,2,3,6,9,8,7,4]"],
      "correct": "[1,2,3,6,9,8,7,4,5]"
    },
    {
      "id": 185,
      "title": "Rotate Image",
      "description": "Rotate an n x n 2D matrix by 90 degrees clockwise.",
      "points": 25,
      "options": ["[[7,4,1],[8,5,2],[9,6,3]]", "[[7,4,1],[8,5,2],[9,6,3]]", "[[9,8,7],[6,5,4],[3,2,1]]", "[[3,6,9],[2,5,8],[1,4,7]]"],
      "correct": "[[7,4,1],[8,5,2],[9,6,3]]"
    },
    {
      "id": 186,
      "title": "Valid Sudoku",
      "description": "Determine if a 9x9 Sudoku board is valid.",
      "points": 25,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 187,
      "title": "Game of Life",
      "description": "Simulate the Game of Life according to Conway's rules.",
      "points": 30,
      "options": ["[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]", "[[0,0,0],[1,1,1],[0,1,1],[0,1,0]]", "[[1,1,1],[1,0,1],[1,1,1],[1,1,1]]", "[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]"],
      "correct": "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]"
    },
    
    {
      "id": 188,
      "title": "Two Sum",
      "description": "Find two numbers in an array that add up to a target sum.",
      "points": 15,
      "options": ["[0,1]", "[1,2]", "[0,2]", "[1,3]"],
      "correct": "[0,1]"
    },
    {
      "id": 189,
      "title": "Valid Parentheses",
      "description": "Determine if the input string has valid parentheses.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 190,
      "title": "Longest Substring Without Repeating",
      "description": "Find the length of the longest substring without repeating characters.",
      "points": 25,
      "options": ["3", "2", "4", "5"],
      "correct": "3"
    },
    {
      "id": 191,
      "title": "Median of Two Sorted Arrays",
      "description": "Find the median of two sorted arrays.",
      "points": 30,
      "options": ["2.0", "2.5", "3.0", "1.5"],
      "correct": "2.0"
    },
    {
      "id": 192,
      "title": "Longest Palindromic Substring",
      "description": "Find the longest palindromic substring.",
      "points": 25,
      "options": ["'bab'", "'aba'", "'bb'", "'baab'"],
      "correct": "'bab'"
    },
    {
      "id": 193,
      "title": "ZigZag Conversion",
      "description": "Convert string to zigzag pattern and read line by line.",
      "points": 20,
      "options": ["'PAHNAPLSIIGYIR'", "'PAYPALISHIRING'", "'PINALSIGYAHRPI'", "'PAHNAPLSIGYIIR'"],
      "correct": "'PAHNAPLSIIGYIR'"
    },
    {
      "id": 194,
      "title": "Container With Most Water",
      "description": "Find the container that can hold the most water.",
      "points": 25,
      "options": ["49", "48", "50", "47"],
      "correct": "49"
    },
    {
      "id": 195,
      "title": "3Sum Closest",
      "description": "Find three integers whose sum is closest to target.",
      "points": 25,
      "options": ["2", "1", "3", "0"],
      "correct": "2"
    },
    {
      "id": 196,
      "title": "Letter Combinations Phone Number",
      "description": "Generate all possible letter combinations of a phone number.",
      "points": 20,
      "options": ["['ad','ae','af','bd','be','bf','cd','ce','cf']", "['abc','def']", "['adg','aeh','afi']", "['ad','be','cf']"],
      "correct": "['ad','ae','af','bd','be','bf','cd','ce','cf']"
    },
    {
      "id": 197,
      "title": "Remove Nth Node From End",
      "description": "Remove nth node from the end of linked list.",
      "points": 20,
      "options": ["[1,2,3,5]", "[1,2,3,4,5]", "[2,3,4,5]", "[1,2,4,5]"],
      "correct": "[1,2,3,5]"
    },
    {
      "id": 198,
      "title": "Valid Sudoku",
      "description": "Check if a Sudoku board is valid.",
      "points": 25,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 199,
      "title": "Count and Say",
      "description": "Generate the nth term of count-and-say sequence.",
      "points": 20,
      "options": ["'1211'", "'111221'", "'312211'", "'21'"],
      "correct": "'1211'"
    },
    {
      "id": 200,
      "title": "Combination Sum",
      "description": "Find all unique combinations that sum to target.",
      "points": 25,
      "options": ["[[7],[2,2,3]]", "[[2,2,3]]", "[[7]]", "[[2,3,2]]"],
      "correct": "[[7],[2,2,3]]"
    },
    {
      "id": 201,
      "title": "First Missing Positive",
      "description": "Find the smallest positive integer not in array.",
      "points": 30,
      "options": ["3", "2", "4", "1"],
      "correct": "3"
    },
    {
      "id": 202,
      "title": "Trapping Rain Water",
      "description": "Calculate trapped rainwater between elevation bars.",
      "points": 30,
      "options": ["6", "5", "7", "8"],
      "correct": "6"
    },
    {
      "id": 203,
      "title": "Jump Game",
      "description": "Determine if you can reach the last index.",
      "points": 25,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 204,
      "title": "Merge Intervals",
      "description": "Merge overlapping intervals.",
      "points": 25,
      "options": ["[[1,6],[8,10],[15,18]]", "[[1,4],[6,8],[10,15]]", "[[1,5],[6,9],[11,18]]", "[[1,3],[4,6],[8,10]]"],
      "correct": "[[1,6],[8,10],[15,18]]"
    },
    {
      "id": 205,
      "title": "Unique Paths",
      "description": "Count unique paths in a grid from top-left to bottom-right.",
      "points": 20,
      "options": ["3", "2", "4", "6"],
      "correct": "3"
    },
    {
      "id": 206,
      "title": "Minimum Path Sum",
      "description": "Find path with minimum sum from top-left to bottom-right.",
      "points": 25,
      "options": ["7", "6", "8", "9"],
      "correct": "7"
    },
    {
      "id": 207,
      "title": "Climb Stairs",
      "description": "Count distinct ways to climb n stairs.",
      "points": 15,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 208,
      "title": "Edit Distance",
      "description": "Find minimum edit distance between two strings.",
      "points": 30,
      "options": ["3", "2", "4", "5"],
      "correct": "3"
    },
    {
      "id": 209,
      "title": "Set Matrix Zeroes",
      "description": "Set entire row and column to zero if element is zero.",
      "points": 25,
      "options": ["[[1,0,1],[0,0,0],[1,0,1]]", "[[0,0,0],[0,0,0],[0,0,0]]", "[[1,0,1],[0,0,0],[0,0,0]]", "[[0,0,0],[0,0,0],[1,0,1]]"],
      "correct": "[[1,0,1],[0,0,0],[1,0,1]]"
    },
    {
      "id": 210,
      "title": "Search in Rotated Array",
      "description": "Search for target in rotated sorted array.",
      "points": 25,
      "options": ["4", "3", "5", "-1"],
      "correct": "4"
    },
    {
      "id": 211,
      "title": "Word Search",
      "description": "Find if word exists in 2D character board.",
      "points": 30,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 212,
      "title": "Largest Rectangle Histogram",
      "description": "Find area of largest rectangle in histogram.",
      "points": 35,
      "options": ["10", "8", "12", "6"],
      "correct": "10"
    },
    {
      "id": 213,
      "title": "Maximal Rectangle",
      "description": "Find largest rectangle containing only 1s in binary matrix.",
      "points": 35,
      "options": ["6", "4", "8", "2"],
      "correct": "6"
    },
    {
      "id": 214,
      "title": "Decode Ways",
      "description": "Count ways to decode a digit string.",
      "points": 25,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 215,
      "title": "Interleaving String",
      "description": "Check if s3 is formed by interleaving s1 and s2.",
      "points": 30,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 216,
      "title": "Best Time Buy Sell Stock",
      "description": "Find maximum profit from buying and selling stock once.",
      "points": 20,
      "options": ["5", "4", "6", "3"],
      "correct": "5"
    },
    {
      "id": 217,
      "title": "Best Time Buy Sell Stock II",
      "description": "Find maximum profit with multiple transactions.",
      "points": 25,
      "options": ["7", "6", "8", "5"],
      "correct": "7"
    },
    {
      "id": 218,
      "title": "Valid Palindrome",
      "description": "Check if string is a palindrome ignoring case and non-alphanumeric.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 219,
      "title": "Word Ladder II",
      "description": "Find all shortest transformation sequences.",
      "points": 40,
      "options": ["[['hit','hot','dot','dog','cog'],['hit','hot','lot','log','cog']]", "[['hit','hot','dot','dog','cog']]", "[['hit','hot','lot','log','cog']]", "[]"],
      "correct": "[['hit','hot','dot','dog','cog'],['hit','hot','lot','log','cog']]"
    },
    {
      "id": 220,
      "title": "Longest Consecutive Sequence",
      "description": "Find length of longest consecutive elements sequence.",
      "points": 25,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 221,
      "title": "Single Number",
      "description": "Find the number that appears once while others appear twice.",
      "points": 15,
      "options": ["1", "2", "3", "4"],
      "correct": "1"
    },
    {
      "id": 222,
      "title": "Single Number II",
      "description": "Find number that appears once while others appear thrice.",
      "points": 25,
      "options": ["3", "2", "1", "4"],
      "correct": "3"
    },
    {
      "id": 223,
      "title": "Copy List Random Pointer",
      "description": "Deep copy linked list with random pointers.",
      "points": 30,
      "options": ["[[7,null],[13,0],[11,4],[10,2],[1,0]]", "[[7,null],[13,7],[11,1],[10,11],[1,7]]", "[[7,null],[13,0],[11,4],[10,2]]", "[[7,null],[13,0],[11,4],[10,2],[1,4]]"],
      "correct": "[[7,null],[13,0],[11,4],[10,2],[1,0]]"
    },
    {
      "id": 224,
      "title": "Word Break",
      "description": "Check if string can be segmented using dictionary words.",
      "points": 25,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 225,
      "title": "Word Break II",
      "description": "Return all possible sentences from word break.",
      "points": 35,
      "options": ["['cats and dog','cat sand dog']", "['cats and dog']", "['cat sand dog']", "[]"],
      "correct": "['cats and dog','cat sand dog']"
    },
    {
      "id": 226,
      "title": "Linked List Cycle II",
      "description": "Find the node where cycle begins in linked list.",
      "points": 25,
      "options": ["tail connects to node index 1", "tail connects to node index 0", "no cycle", "tail connects to node index 2"],
      "correct": "tail connects to node index 1"
    },
    {
      "id": 227,
      "title": "Sort List",
      "description": "Sort a linked list in O(n log n) time.",
      "points": 30,
      "options": ["[-1,0,3,4,5]", "[5,4,3,0,-1]", "[-1,0,4,3,5]", "[0,-1,3,4,5]"],
      "correct": "[-1,0,3,4,5]"
    },
    {
      "id": 228,
      "title": "Maximum Product Subarray",
      "description": "Find contiguous subarray with largest product.",
      "points": 25,
      "options": ["6", "4", "8", "2"],
      "correct": "6"
    },
    {
      "id": 229,
      "title": "Find Minimum Rotated Array",
      "description": "Find minimum element in rotated sorted array.",
      "points": 20,
      "options": ["1", "0", "2", "3"],
      "correct": "1"
    },
    {
      "id": 230,
      "title": "Find Minimum Rotated Array II",
      "description": "Find minimum in rotated array with duplicates.",
      "points": 25,
      "options": ["1", "0", "2", "3"],
      "correct": "1"
    },
    {
      "id": 231,
      "title": "Min Stack",
      "description": "Design stack that supports push, pop, top, and getMin in O(1).",
      "points": 20,
      "options": ["[-3,-2,-2,1]", "[-3,-2,-2,0]", "[-3,-2,-2,2]", "[-3,-2,-2,3]"],
      "correct": "[-3,-2,-2,1]"
    },
    {
      "id": 232,
      "title": "Intersection Two Linked Lists",
      "description": "Find intersection point of two linked lists.",
      "points": 20,
      "options": ["8", "4", "2", "1"],
      "correct": "8"
    },
    {
      "id": 233,
      "title": "Compare Version Numbers",
      "description": "Compare two version number strings.",
      "points": 20,
      "options": ["0", "-1", "1", "2"],
      "correct": "0"
    },
    {
      "id": 234,
      "title": "Fraction to Recurring Decimal",
      "description": "Return fraction as string with repeating part in parentheses.",
      "points": 30,
      "options": ["'0.(6)'", "'0.6666'", "'0.66666'", "'0.6'"],
      "correct": "'0.(6)'"
    },
    {
      "id": 235,
      "title": "Two Sum II Sorted Array",
      "description": "Find two numbers that add up to target in sorted array.",
      "points": 15,
      "options": ["[1,2]", "[0,1]", "[2,3]", "[1,3]"],
      "correct": "[1,2]"
    },
    {
      "id": 236,
      "title": "Excel Sheet Column Title",
      "description": "Convert positive integer to Excel column title.",
      "points": 20,
      "options": ["'A'", "'B'", "'Z'", "'AA'"],
      "correct": "'A'"
    },
    {
      "id": 237,
      "title": "Majority Element",
      "description": "Find element that appears more than n/2 times.",
      "points": 15,
      "options": ["3", "2", "1", "4"],
      "correct": "3"
    },
    {
      "id": 238,
      "title": "Majority Element II",
      "description": "Find all elements that appear more than n/3 times.",
      "points": 25,
      "options": ["[3]", "[1,2]", "[3,1]", "[2,3]"],
      "correct": "[3]"
    },
    {
      "id": 239,
      "title": "Excel Sheet Column Number",
      "description": "Convert Excel column title to number.",
      "points": 15,
      "options": ["1", "26", "27", "701"],
      "correct": "1"
    },
    {
      "id": 240,
      "title": "Factorial Trailing Zeroes",
      "description": "Count trailing zeroes in n factorial.",
      "points": 20,
      "options": ["1", "0", "2", "3"],
      "correct": "1"
    },
    {
      "id": 241,
      "title": "Dungeon Game",
      "description": "Find minimum initial health to rescue princess.",
      "points": 30,
      "options": ["7", "6", "8", "5"],
      "correct": "7"
    },
    {
      "id": 242,
      "title": "Largest Number",
      "description": "Arrange numbers to form largest possible number.",
      "points": 25,
      "options": ["'210'", "'102'", "'021'", "'201'"],
      "correct": "'210'"
    },
    {
      "id": 243,
      "title": "Repeated DNA Sequences",
      "description": "Find all 10-letter DNA sequences that occur more than once.",
      "points": 20,
      "options": ["['AAAAACCCCC','CCCCCAAAAA']", "['AAAAACCCCC']", "['CCCCCAAAAA']", "[]"],
      "correct": "['AAAAACCCCC','CCCCCAAAAA']"
    },
    {
      "id": 244,
      "title": "Best Time Buy Sell Stock III",
      "description": "Maximum profit with at most 2 transactions.",
      "points": 35,
      "options": ["4", "3", "5", "6"],
      "correct": "4"
    },
    {
      "id": 245,
      "title": "Best Time Buy Sell Stock IV",
      "description": "Maximum profit with at most k transactions.",
      "points": 35,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 246,
      "title": "House Robber",
      "description": "Maximum money that can be robbed without robbing adjacent houses.",
      "points": 20,
      "options": ["4", "3", "5", "6"],
      "correct": "4"
    },
    {
      "id": 247,
      "title": "House Robber II",
      "description": "Houses arranged in circle - can't rob first and last.",
      "points": 25,
      "options": ["3", "2", "4", "5"],
      "correct": "3"
    },
    {
      "id": 248,
      "title": "Number of Islands",
      "description": "Count number of islands in 2D binary grid.",
      "points": 25,
      "options": ["1", "2", "3", "4"],
      "correct": "1"
    },
    {
      "id": 249,
      "title": "Happy Number",
      "description": "Determine if number eventually becomes 1 when replaced by sum of squares.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 250,
      "title": "Remove Linked List Elements",
      "description": "Remove all elements with given value from linked list.",
      "points": 15,
      "options": ["[1,2,3,5]", "[1,2,6,3,4,5,6]", "[2,6,3,4,5,6]", "[1,3,4,5]"],
      "correct": "[1,2,3,5]"
    },
    {
      "id": 251,
      "title": "Count Primes",
      "description": "Count prime numbers less than non-negative number n.",
      "points": 20,
      "options": ["4", "3", "5", "2"],
      "correct": "4"
    },
    {
      "id": 252,
      "title": "Isomorphic Strings",
      "description": "Check if two strings are isomorphic.",
      "points": 20,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 253,
      "title": "Reverse Linked List",
      "description": "Reverse singly linked list iteratively or recursively.",
      "points": 15,
      "options": ["[5,4,3,2,1]", "[1,2,3,4,5]", "[5,4,3,2]", "[4,3,2,1]"],
      "correct": "[5,4,3,2,1]"
    },
    {
      "id": 254,
      "title": "Course Schedule",
      "description": "Check if all courses can be finished given prerequisites.",
      "points": 25,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 255,
      "title": "Course Schedule II",
      "description": "Return ordering of courses to finish all courses.",
      "points": 25,
      "options": ["[0,1]", "[1,0]", "[]", "[0,1,2,3]"],
      "correct": "[0,1]"
    },
    {
      "id": 256,
      "title": "Implement Trie",
      "description": "Implement prefix tree data structure.",
      "points": 25,
      "options": ["[null,null,true,null,true,null,true]", "[null,null,false,null,true,null,false]", "[null,null,true,null,false,null,true]", "[null,null,true,null,true,null,false]"],
      "correct": "[null,null,true,null,true,null,true]"
    },
    {
      "id": 257,
      "title": "Minimum Size Subarray Sum",
      "description": "Find minimal length subarray with sum >= target.",
      "points": 25,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 258,
      "title": "Add and Search Word",
      "description": "Design data structure supporting addWord and search with '.' wildcard.",
      "points": 25,
      "options": ["[null,null,false,true,true,false,true]", "[null,null,true,true,true,false,true]", "[null,null,false,false,true,true,true]", "[null,null,false,true,false,true,true]"],
      "correct": "[null,null,false,true,true,false,true]"
    },
    {
      "id": 259,
      "title": "Word Search II",
      "description": "Find all words from dictionary that exist in 2D board.",
      "points": 35,
      "options": ["['eat','oath']", "['eat']", "['oath']", "['eat','oath','pea','tea']"],
      "correct": "['eat','oath']"
    },
    {
      "id": 260,
      "title": "House Robber III",
      "description": "Rob houses arranged in binary tree without alerting police.",
      "points": 25,
      "options": ["7", "6", "8", "9"],
      "correct": "7"
    },
    {
      "id": 261,
      "title": "Serialize Deserialize Binary Tree",
      "description": "Design algorithm to serialize and deserialize binary tree.",
      "points": 30,
      "options": ["'1,2,3,null,null,4,5'", "'1,2,3,4,5'", "'1,2,null,3,null,4,null,5'", "'1,null,2,null,3,null,4,null,5'"],
      "correct": "'1,2,3,null,null,4,5'"
    },
    {
      "id": 262,
      "title": "Find Median Data Stream",
      "description": "Find median from data stream.",
      "points": 30,
      "options": ["[null,null,1.5,null,2.0]", "[null,null,1.0,null,2.0]", "[null,null,1.5,null,1.5]", "[null,null,2.0,null,2.0]"],
      "correct": "[null,null,1.5,null,2.0]"
    },
    {
      "id": 263,
      "title": "Longest Increasing Subsequence",
      "description": "Find length of longest increasing subsequence.",
      "points": 25,
      "options": ["4", "3", "5", "6"],
      "correct": "4"
    },
    {
      "id": 264,
      "title": "Remove Invalid Parentheses",
      "description": "Remove minimum parentheses to make string valid.",
      "points": 35,
      "options": ["['()()()','(())()']", "['()()()']", "['(())()']", "['((()))']"],
      "correct": "['()()()','(())()']"
    },
    {
      "id": 265,
      "title": "Range Sum Query Immutable",
      "description": "Calculate sum of elements between indices i and j.",
      "points": 15,
      "options": ["[null,1,6,2]", "[null,1,5,2]", "[null,0,6,2]", "[null,1,6,1]"],
      "correct": "[null,1,6,2]"
    },
    {
      "id": 266,
      "title": "Range Sum Query 2D",
      "description": "Calculate sum of rectangle region in 2D matrix.",
      "points": 20,
      "options": ["[null,8,11,12]", "[null,8,10,12]", "[null,7,11,12]", "[null,8,11,13]"],
      "correct": "[null,8,11,12]"
    },
    {
      "id": 267,
      "title": "Perfect Squares",
      "description": "Find least number of perfect square numbers that sum to n.",
      "points": 25,
      "options": ["3", "2", "4", "1"],
      "correct": "3"
    },
    {
      "id": 268,
      "title": "Move Zeroes",
      "description": "Move all zeros to end while maintaining relative order.",
      "points": 15,
      "options": ["[1,3,12,0,0]", "[0,1,0,3,12]", "[1,0,3,0,12]", "[1,3,0,0,12]"],
      "correct": "[1,3,12,0,0]"
    },
    {
      "id": 269,
      "title": "Find Duplicate Number",
      "description": "Find duplicate number in array of n+1 integers.",
      "points": 25,
      "options": ["2", "1", "3", "4"],
      "correct": "2"
    },
    {
      "id": 270,
      "title": "Game of Life",
      "description": "Apply rules of Conway's Game of Life to 2D board.",
      "points": 25,
      "options": ["[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]", "[[0,0,0],[1,1,1],[0,1,1],[0,1,0]]", "[[1,1,1],[1,0,1],[1,1,1],[1,1,1]]", "[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]"],
      "correct": "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]"
    },
    {
      "id": 271,
      "title": "Word Pattern",
      "description": "Check if string follows same pattern as given pattern.",
      "points": 15,
      "options": ["true", "false"],
      "correct": "true"
    },
    {
      "id": 272,
      "title": "Nim Game",
      "description": "Determine if you can win Nim game.",
      "points": 10,
      "options": ["false", "true"],
      "correct": "false"
    },
    {
      "id": 273,
      "title": "Find Disappeared Numbers",
      "description": "Find all numbers disappeared in array of length n.",
      "points": 20,
      "options": ["[5,6]", "[4,5]", "[5,7]", "[4,6]"],
      "correct": "[5,6]"
    },
    {
      "id": 274,
      "title": "Serialize Deserialize BST",
      "description": "Serialize and deserialize binary search tree.",
      "points": 25,
      "options": ["'2,1,3'", "'2,1,null,null,3'", "'1,null,2,null,3'", "'1,2,3'"],
      "correct": "'2,1,3'"
    },
    {
      "id": 275,
      "title": "Russian Doll Envelopes",
      "description": "Find maximum number of nested envelopes.",
      "points": 30,
      "options": ["3", "2", "4", "1"],
      "correct": "3"
    }

  ],
   
  "leaderboard": [
    { "id": 1, "name": "Mayur", "points": 1200, "rank": 1 },
    { "id": 2, "name": "Aditi", "points": 950, "rank": 2 },
    { "id": 3, "name": "Rahul", "points": 700, "rank": 3 },
    { "id": 4, "name": "Priya", "points": 680, "rank": 4 },
    { "id": 5, "name": "Arjun", "points": 650, "rank": 5 },
    { "id": 6, "name": "Sneha", "points": 620, "rank": 6 },
    { "id": 7, "name": "Vikram", "points": 590, "rank": 7 },
    { "id": 8, "name": "Kavya", "points": 560, "rank": 8 },
    { "id": 9, "name": "Rohan", "points": 540, "rank": 9 },
    { "id": 10, "name": "Ananya", "points": 520, "rank": 10 },
    { "id": 11, "name": "Kiran", "points": 490, "rank": 11 },
    { "id": 12, "name": "Meera", "points": 470, "rank": 12 },
    { "id": 13, "name": "Nikhil", "points": 450, "rank": 13 },
    { "id": 14, "name": "Pooja", "points": 430, "rank": 14 },
    { "id": 15, "name": "Sanjay", "points": 410, "rank": 15 },
    { "id": 16, "name": "Riya", "points": 390, "rank": 16 },
    { "id": 17, "name": "Amit", "points": 370, "rank": 17 },
    { "id": 18, "name": "Divya", "points": 350, "rank": 18 },
    { "id": 19, "name": "Harsh", "points": 330, "rank": 19 },
    { "id": 20, "name": "Nisha", "points": 310, "rank": 20 },
    { "id": 21, "name": "Deepak", "points": 290, "rank": 21 },
    { "id": 22, "name": "Shruti", "points": 275, "rank": 22 },
    { "id": 23, "name": "Rajesh", "points": 260, "rank": 23 },
    { "id": 24, "name": "Aarti", "points": 245, "rank": 24 },
    { "id": 25, "name": "Manish", "points": 230, "rank": 25 },
    { "id": 26, "name": "Kriti", "points": 220, "rank": 26 },
    { "id": 27, "name": "Gaurav", "points": 210, "rank": 27 },
    { "id": 28, "name": "Tanya", "points": 200, "rank": 28 },
    { "id": 29, "name": "Suresh", "points": 190, "rank": 29 },
    { "id": 30, "name": "Vaishali", "points": 180, "rank": 30 },
    { "id": 31, "name": "Abhishek", "points": 170, "rank": 31 },
    { "id": 32, "name": "Swati", "points": 160, "rank": 32 },
    { "id": 33, "name": "Vivek", "points": 150, "rank": 33 },
    { "id": 34, "name": "Pallavi", "points": 140, "rank": 34 },
    { "id": 35, "name": "Akash", "points": 130, "rank": 35 },
    { "id": 36, "name": "Rashika", "points": 125, "rank": 36 },
    { "id": 37, "name": "Sachin", "points": 120, "rank": 37 },
    { "id": 38, "name": "Anjali", "points": 115, "rank": 38 },
    { "id": 39, "name": "Rohit", "points": 110, "rank": 39 },
    { "id": 40, "name": "Neha", "points": 105, "rank": 40 },
    { "id": 41, "name": "Ajay", "points": 100, "rank": 41 },
    { "id": 42, "name": "Simran", "points": 95, "rank": 42 },
    { "id": 43, "name": "Vinay", "points": 90, "rank": 43 },
    { "id": 44, "name": "Preeti", "points": 85, "rank": 44 },
    { "id": 45, "name": "Saurabh", "points": 80, "rank": 45 },
    { "id": 46, "name": "Priyanka", "points": 75, "rank": 46 },
    { "id": 47, "name": "Manoj", "points": 70, "rank": 47 },
    { "id": 48, "name": "Shweta", "points": 65, "rank": 48 },
    { "id": 49, "name": "Ravi", "points": 60, "rank": 49 },
    { "id": 50, "name": "Sunita", "points": 55, "rank": 50 }
  ]
}



    